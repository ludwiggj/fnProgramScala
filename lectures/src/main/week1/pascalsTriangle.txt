@tailrec
    def triangle(acc: List[List[Int]], rowCount: Int, currentRow: Int): List[List[Int]] = {
      currentRow match {
        case x if x > rowCount => acc
        case 0 => triangle(acc :+ List(1), rowCount, 1)      
        case _ => triangle(acc :+ (1 +: innerTriangleRow(List(), acc(currentRow-1)) :+ 1), rowCount, currentRow + 1)
      }
    }
    
    def makeTriangle(rowCount: Int): List[List[Int]] = {
      var t = triangle(List(), rowCount, 0)
      for (row <- t) {
        for (col <- row) {
          print(col + " ")
        }
        println()
      }
      t
    }

//    for (i <- 0 to 7) {
//      println("Pascal's Triangle (" + i + ")")
//      makeTriangle(i)
//      println()
//      println()
//    }
    
//    for (i <- 0 to 7) {
//      println("Pascal's Triangle Row (" + i + ")")
//      getTriangleRow(i)
//      println()
//      println()
//    }
